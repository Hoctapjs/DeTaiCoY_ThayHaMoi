import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import rbf_kernel
from scipy.sparse.linalg import eigsh, LinearOperator
from scipy.sparse import diags
from sklearn.cluster import KMeans
from skimage import io, color
import time
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from scipy.sparse import coo_matrix #chuy·ªÉn sang ma tr·∫≠n coo
from scipy.sparse import isspmatrix, diags
import logging
import os
import pandas as pd
        
def kiemThuChayNhieuLan(i, name, folder_path, output_excel="results.xlsx"):
    # Ki·ªÉm tra th∆∞ m·ª•c
    if not os.path.isdir(folder_path):
        print(f"‚ùå Th∆∞ m·ª•c {folder_path} kh√¥ng t·ªìn t·∫°i!")
        return
    
    # L·∫•y danh s√°ch file ·∫£nh
    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
    
    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong {folder_path}!")
        return

    results = []  # Danh s√°ch l∆∞u k·∫øt qu·∫£

    for idx, file_name in enumerate(image_files, start=1):
        image_path = os.path.join(folder_path, file_name)
        print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh {idx}: {image_path}")
        
        # X·ª≠ l√Ω ·∫£nh
        _, wf_time, wc_time, W_all   = normalized_cuts(i, file_name, image_path, output_excel)  # B·ªè time_w v√¨ kh√¥ng c·∫ßn
        
        # L∆∞u k·∫øt qu·∫£ v√†o danh s√°ch
        results.append([i, idx, file_name, wf_time, wc_time, W_all])

    # Ghi k·∫øt qu·∫£ v√†o file Excel
    df = pd.DataFrame(results, columns=["L·∫ßn ch·∫°y", "·∫¢nh s·ªë", "T√™n ·∫£nh", "Th·ªùi gian W ƒë·∫∑c tr∆∞ng (s)", "Th·ªùi gian W t·ªça ƒë·ªô (s)", "Th·ªùi gian W All"])


    # T·∫°o t√™n file k·∫øt qu·∫£ theo format chu·∫©n
    output_excel = f"result_{name}_{i}.xlsx"
    
    df.to_excel(output_excel, index=False, engine='openpyxl')
    print(f"‚úÖ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o {output_excel}")

import numpy as np
import time

def compute_rbf_matrix(X, gamma):
    """T√≠nh ma tr·∫≠n RBF Kernel tr√™n CPU b·∫±ng v√≤ng l·∫∑p thu·∫ßn Python."""
    n, d = X.shape
    W = np.zeros((n, n), dtype=np.float64)

    for i in range(n):
        for j in range(n):
            dist = 0.0
            for k in range(d):
                diff = X[i, k] - X[j, k]
                dist += diff * diff
            W[i, j] = np.exp(-gamma * dist)

    return W

def compute_weight_matrix(image, sigma_i=0.1, sigma_x=10):
    """T√≠nh ma tr·∫≠n tr·ªçng s·ªë tr√™n CPU b·∫±ng v√≤ng l·∫∑p thu·∫ßn Python."""
    h, w, c = image.shape
    coords = np.array(np.meshgrid(np.arange(h), np.arange(w))).reshape(2, -1).T  # T·ªça ƒë·ªô (x, y)
    features = image.reshape(-1, c)  # Chuy·ªÉn to√†n b·ªô ƒë·∫∑c tr∆∞ng th√†nh m·∫£ng 2D

    gamma_i = 1 / (2 * sigma_i**2)
    gamma_x = 1 / (2 * sigma_x**2)

    # T√≠nh ma tr·∫≠n tr·ªçng s·ªë d·ª±a tr√™n ƒë·∫∑c tr∆∞ng m√†u
    start_features = time.time()
    W_features = compute_rbf_matrix(features, gamma_i)
    end_features = time.time()
    W_features_time = end_features - start_features

    # T√≠nh ma tr·∫≠n tr·ªçng s·ªë d·ª±a tr√™n t·ªça ƒë·ªô kh√¥ng gian
    start_coords = time.time()
    W_coords = compute_rbf_matrix(coords, gamma_x)
    end_coords = time.time()
    W_coords_time = end_coords - start_coords

    # Nh√¢n hai ma tr·∫≠n tr·ªçng s·ªë ƒë·ªÉ t·∫°o ma tr·∫≠n W cu·ªëi c√πng
    W = np.multiply(W_features, W_coords)
    return W, W_features_time, W_coords_time



# def compute_laplacian(W):
#     D = np.diag(W.sum(axis=1))
#     L = D - W
#     return L, D

# from scipy.sparse import diags, issparse
# import numpy as np
# import time
# from scipy.sparse.linalg import eigsh

# def compute_eigen(L, D, k=2):
#     if issparse(D):
#         D = D.todense()  # Chuy·ªÉn sang d·∫°ng dense n·∫øu l√† sparse

#     D_diag = np.array(D.diagonal()).copy()  # B·∫£n sao c√≥ th·ªÉ ch·ªânh s·ª≠a
#     D_diag[D_diag < 1e-10] = 1e-10  # Tr√°nh gi√° tr·ªã qu√° nh·ªè g√¢y l·ªói

#     if issparse(D):
#         D.setdiag(D_diag)  # C·∫≠p nh·∫≠t ƒë∆∞·ªùng ch√©o n·∫øu l√† sparse matrix
#     else:
#         np.fill_diagonal(D, D_diag)  # N·∫øu l√† numpy array, d√πng fill_diagonal()

#     D_inv_sqrt = diags(1.0 / np.sqrt(D_diag))  # T·∫°o ma tr·∫≠n ngh·ªãch ƒë·∫£o cƒÉn
#     L_normalized = D_inv_sqrt @ L @ D_inv_sqrt  # Chu·∫©n h√≥a Laplacian

#     start_time = time.time()
#     eigvals, eigvecs = eigsh(L_normalized, k, which='SM')  # T√≠nh eigen
#     end_time = time.time()

#     lanczos_time = end_time - start_time
#     eigvecs_original = D_inv_sqrt @ eigvecs  # Kh√¥i ph·ª•c eigen vectors g·ªëc

#     return eigvecs_original, lanczos_time

# t·∫°m th·ªùi kh√≥a ƒë·ªÉ test ƒë·ªô ch√≠nh x√°c

# 2. Tinh ma tran Laplace
def compute_laplacian(W_sparse):
    # T·∫°o ma tr·∫≠n ƒë∆∞·ªùng ch√©o t·ª´ t·ªïng c√°c h√†ng
    D_diag = W_sparse.sum(axis=1).A.flatten() if hasattr(W_sparse, 'toarray') else W_sparse.sum(axis=1)
    D = np.diag(D_diag)  # Ma tr·∫≠n ƒë∆∞·ªùng ch√©o
    L = D - W_sparse.toarray() if hasattr(W_sparse, 'toarray') else D -W_sparse  # ƒê·∫£m b·∫£o W l√† d·∫°ng m·∫£ng NumPy

    return L, D


# 3. Giai bai toan tri rieng
def handle_dot(a, b):
    """T√≠nh t√≠ch v√¥ h∆∞·ªõng c·ªßa hai vector song song h√≥a"""
    return np.sum(a * b)  # NumPy ƒë√£ t·ªëi ∆∞u h√≥a, nh∆∞ng c√≥ th·ªÉ d√πng joblib n·∫øu c·∫ßn

def matrix_vector_product(A, v):  
    """H√†m nh√¢n ma tr·∫≠n v·ªõi vector"""  
    return A @ v  

def Lanczos(A, v, m):
    n = len(v)
    V = np.zeros((m, n))
    T = np.zeros((m, m))
    V[0, :] = v / np.linalg.norm(v)
    
    w = matrix_vector_product(A, V[0, :])
    alpha = handle_dot(w, V[0, :])  # T√≠ch v√¥ h∆∞·ªõng song song
    
    w = w - alpha * V[0, :]
    T[0, 0] = alpha
    
    for j in range(1, m):
        beta = np.linalg.norm(w)
        if beta < 1e-10:
            break
        V[j, :] = w / beta
        w = A @ V[j, :]
        alpha = handle_dot(w, V[j, :])
        w = w - alpha * V[j, :] - beta * V[j-1, :]
        
        T[j, j] = alpha
        T[j-1, j] = beta
        T[j, j-1] = beta
    
    return T, V

def compute_eigen(L, D, k=2):
    """
    Gi·∫£i b√†i to√°n tr·ªã ri√™ng b·∫±ng thu·∫≠t to√°n Lanczos kh√¥ng d√πng eigsh.
    :param L: Ma tr·∫≠n Laplace th∆∞a (Scipy sparse matrix).
    :param D: Ma tr·∫≠n ƒë∆∞·ªùng ch√©o (Scipy sparse matrix).
    :param k: S·ªë tr·ªã ri√™ng nh·ªè nh·∫•t c·∫ßn t√≠nh.
    :return: C√°c vector ri√™ng t∆∞∆°ng ·ª©ng (k vector).
    """
    # Chuan hoa ma tran Laplace: D^-1/2 * L * D^-1/2
    D_diag = D.diagonal().copy()  # Lay duong cheo cua D
    D_diag[D_diag < 1e-10] = 1e-10  # Tranh chia cho 0 hoac gan 0
    D_inv_sqrt = diags(1.0 / np.sqrt(D_diag))  # Tinh D^-1/2
    L_normalized = D_inv_sqrt @ L @ D_inv_sqrt  # Chuan hoa ma tran Laplace
    
    # Kh·ªüi t·∫°o vector ng·∫´u nhi√™n
    v0 = np.random.rand(L.shape[0])
    v0 /= np.linalg.norm(v0)

    # √Åp d·ª•ng thu·∫≠t to√°n Lanczos
    lanczos_time_start = time.time()
    T, V = Lanczos(L_normalized, v0, m=k+5)  # S·ª≠ d·ª•ng m > k ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
    lanczos_time_end = time.time()

    # Th·ªùi gian Lanczos
    lanczos_time = lanczos_time_end - lanczos_time_start
    
    # T√≠nh tr·ªã ri√™ng v√† vector ri√™ng c·ªßa ma tr·∫≠n tam gi√°c T
    eigvals, eigvecs_T = np.linalg.eig(T[:k, :k])
    
    # Chuy·ªÉn ƒë·ªïi vector ri√™ng v·ªÅ kh√¥ng gian g·ªëc
    eigvecs_original = D_inv_sqrt @ (V[:k, :].T @ eigvecs_T)
    
    return eigvecs_original, lanczos_time

# 4. Gan nhan cho tung diem anh dua tren vector rieng
def assign_labels(eigen_vectors, k):
    return KMeans(n_clusters=k, random_state=0).fit(eigen_vectors).labels_

def save_segmentation(image, labels, k, output_path):
    h, w, c = image.shape
    segmented_image = np.zeros_like(image, dtype=np.uint8)
    for i in range(k):
        mask = labels.reshape(h, w) == i
        cluster_pixels = image[mask]
        mean_color = (cluster_pixels.mean(axis=0) * 255).astype(np.uint8) if len(cluster_pixels) > 0 else np.array([0, 0, 0], dtype=np.uint8)
        segmented_image[mask] = mean_color
    io.imsave(output_path, segmented_image)

from datetime import datetime

def save_seg_file(labels, image_shape, output_path, image_name="image"):
    h, w = image_shape[:2]
    unique_labels = np.unique(labels)
    segments = len(unique_labels)
    
    # T·∫°o ph·∫ßn header
    header = [
        "format ascii cr",
        f"date {datetime.now().strftime('%a %b %d %H:%M:%S %Y')}",
        f"image {image_name}",
        "user 1102",  # Gi·ªØ nguy√™n nh∆∞ file m·∫´u
        f"width {w}",
        f"height {h}",
        f"segments {segments}",
        "gray 0",
        "invert 0",
        "flipflop 0",
        "data"
    ]
    
    # T·∫°o d·ªØ li·ªáu pixel theo ƒë·ªãnh d·∫°ng (nh√£n, d√≤ng, c·ªôt b·∫Øt ƒë·∫ßu, c·ªôt k·∫øt th√∫c)
    data_lines = []
    for row in range(h):
        row_labels = labels[row, :]
        start_col = 0
        current_label = row_labels[0]
        
        for col in range(1, w):
            if row_labels[col] != current_label:
                data_lines.append(f"{current_label} {row} {start_col} {col}")
                start_col = col
                current_label = row_labels[col]
        
        # Th√™m d√≤ng cu·ªëi c√πng c·ªßa h√†ng
        data_lines.append(f"{current_label} {row} {start_col} {w}")
    
    # L∆∞u v√†o file
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("\n".join(header) + "\n")
        f.write("\n".join(data_lines) + "\n")
    
    print(f"‚úÖ File SEG ƒë√£ l∆∞u: {output_path}")

def normalized_cuts(lan, imagename, image_path, output_path):
    start_cpu = time.time()  # ƒêo t·ªïng th·ªùi gian x·ª≠ l√Ω
    
    # ƒê·ªçc ·∫£nh v√† chu·∫©n h√≥a
    image = io.imread(image_path)
    image = color.gray2rgb(image) if image.ndim == 2 else image[:, :, :3] if image.shape[2] == 4 else image
    image = image / 255.0
    k = 2  

    # T√≠nh ma tr·∫≠n tr·ªçng s·ªë
    W, W_f, W_c = compute_weight_matrix(image)
    W_all = W_f + W_c

    # T√≠nh to√°n Laplacian
    L, D = compute_laplacian(W)

    # Gi·∫£i eigen v√† ƒëo th·ªùi gian Lanczos
    vecs, lanczos_time = compute_eigen(L, D, k)

    # G√°n nh√£n
    labels = assign_labels(vecs, k)

    # L∆∞u k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng file SEG
    seg_output_path = f"{imagename}_segmentation.seg"
    save_seg_file(labels.reshape(image.shape[:2]), image.shape, seg_output_path, imagename)

    end_cpu = time.time()
    
    # T√≠nh t·ªïng th·ªùi gian
    total_cpu_time = end_cpu - start_cpu

    return total_cpu_time, W_f, W_c, W_all



# 7. Mo file chon anh tu hop thoai
def open_file_dialog():
    # Tao cua so an cho tkinter
    root = Tk()
    root.withdraw()  # An cua so chinh
    
    # Mo hop thoai chon file anh
    file_path = askopenfilename(title="Chon anh", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")])
    return file_path   

# 8. Chay thu nghiem
if __name__ == "__main__":
    # Mo hop thoai chon anh
    image_path = open_file_dialog()
    if image_path:
        logging.info(f"Da chon anh: {image_path}")
        normalized_cuts(image_path, k=3)  # Phan vung thanh 3 nhom
    else:
        logging.info("Khong co anh nao duoc chon.")


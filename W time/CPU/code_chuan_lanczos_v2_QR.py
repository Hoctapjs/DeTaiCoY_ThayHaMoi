import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import rbf_kernel
from scipy.sparse.linalg import eigsh, LinearOperator
from scipy.sparse import diags
from sklearn.cluster import KMeans
from skimage import io, color
import time
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from scipy.sparse import coo_matrix #chuy·ªÉn sang ma tr·∫≠n coo
from scipy.sparse import isspmatrix, diags
import logging
import os


# logging.basicConfig(level=logging.INFO)  

""" def kiemThuChayNhieuLan(i, name):
        temp_chuoi = f"{name}{i}"
        temp_chuoi = temp_chuoi + '.txt'
        logging.basicConfig(filename = temp_chuoi, level=logging.INFO, 
                            format='%(asctime)s - %(levelname)s - %(message)s')
        # Duong dan toi anh cua ban
        image_path = "apple3_60x60.jpg"  # Thay bang duong dan anh cua ban
        image_path = "apple4_98x100.jpg"  # Thay bang duong dan anh cua ban
        normalized_cuts(image_path, k=3) """
        
def kiemThuChayNhieuLan(i, name, folder_path):
    # Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.isdir(folder_path):
        print(f"‚ùå Th∆∞ m·ª•c {folder_path} kh√¥ng t·ªìn t·∫°i!")
        return
    
    # L·∫•y danh s√°ch t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c
    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
    
    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong {folder_path}!")
        return

    for idx, file_name in enumerate(image_files, start=1):
        image_path = os.path.join(folder_path, file_name)

        # T·∫°o file log ri√™ng cho t·ª´ng l·∫ßn ch·∫°y
        log_file = f"{name}_{i}_{idx}.txt"
        save_image_name = f"{name}_{i}_{idx}.png"

        
        # C·∫•u h√¨nh logging
        logging.basicConfig(filename=log_file, level=logging.INFO,
                            format='%(asctime)s - %(levelname)s - %(message)s')

        print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh {idx}: {image_path}")
        
        # G·ªçi h√†m x·ª≠ l√Ω ·∫£nh
        normalized_cuts(i, file_name, image_path, save_image_name)

# 1. Tinh ma tran trong so
def compute_weight_matrix(image, sigma_i=0.1, sigma_x=10):
    h, w, c = image.shape
    coords = np.array(np.meshgrid(range(h), range(w))).reshape(2, -1).T  # Toa do (x, y)
    features = image.reshape(-1, c)  # Dac trung mau
    

    
    # Tinh do tuong dong ve dac trung va khong gian
    W_features = rbf_kernel(features, gamma=1/(2 * sigma_i**2))
    W_coords = rbf_kernel(coords, gamma=1/(2 * sigma_x**2))
    W = W_features * W_coords
    

    # Chuyen ma tran W sang dang ma tran thua COO
    W_sparse = coo_matrix(W)
    
    return W_sparse



# 2. Tinh ma tran Laplace
def compute_laplacian(W_sparse):
    # T·∫°o ma tr·∫≠n ƒë∆∞·ªùng ch√©o t·ª´ t·ªïng c√°c h√†ng
    D_diag = W_sparse.sum(axis=1).A.flatten() if hasattr(W_sparse, 'toarray') else W_sparse.sum(axis=1)
    D = np.diag(D_diag)  # Ma tr·∫≠n ƒë∆∞·ªùng ch√©o
    L = D - W_sparse.toarray() if hasattr(W_sparse, 'toarray') else D -W_sparse  # ƒê·∫£m b·∫£o W l√† d·∫°ng m·∫£ng NumPy


    # T·∫°o ma tr·∫≠n ƒë∆∞·ªùng ch√©o t·ª´ t·ªïng c√°c h√†ng
    # D_diag = W_sparse.sum(axis=1).A.flatten() 
    # D = np.diag(D_diag)  # Ma tr·∫≠n ƒë∆∞·ªùng ch√©o
    # L = D - W_sparse # L = D - W


    return L, D

# def compute_laplacian(W_sparse):
#     D_diag = np.array(W_sparse.sum(axis=1)).flatten()
#     D_inv_sqrt = diags(1.0 / np.sqrt(D_diag + 1e-10))  # Tr√°nh chia cho 0
#     L_normalized = D_inv_sqrt @ (diags(D_diag) - W_sparse) @ D_inv_sqrt
#     return L_normalized, D_inv_sqrt

# def compute_eigen(L_normalized, k=2):
#     eigvals, eigvecs = eigsh(L_normalized, k=k, which='SM')
#     return eigvecs



# 3. Giai bai toan tri rieng

#Version 4 - kh√¥ng d√πng eig m√† code lanzcos thu·∫ßn - d√πng thu·∫≠t to√°n QR
def Lanczos(A, v, m):
    """
    Thu·∫≠t to√°n Lanczos ƒë·ªÉ x·∫•p x·ªâ tr·ªã ri√™ng v√† vector ri√™ng.
    : A: Ma tr·∫≠n c·∫ßn t√≠nh (numpy 2D array).
    : v: Vector kh·ªüi t·∫°o.
    : m: S·ªë b∆∞·ªõc l·∫∑p Lanczos.
    :return: Ma tr·∫≠n tam gi√°c T v√† ma tr·∫≠n tr·ª±c giao V.
    """
    n = len(v) # ƒê√¢y l√† s·ªë ph·∫ßn t·ª≠ trong vector v (s·ªë chi·ªÅu c·ªßa ma tr·∫≠n A)
    V = np.zeros((m, n)) # ƒë√¢y l√† m·ªôt ma tr·∫≠n mxn l∆∞u tr·ªØ c√°c vector tr·ª±c giao (l√† 2 vector c√≥ t√≠ch v√¥ h∆∞·ªõng = 0), m·ªói h√†ng l√† m·ªôt b∆∞·ªõc ƒë√£ ƒëi qua, np.zeros nghƒ©a l√† ban ƒë·∫ßu t·∫•t c·∫£ c√°c b∆∞·ªõc ƒëi (hay c√°c ph·∫ßn t·ª≠ c·ªßa ma tr·∫≠n) ƒë·ªÅu l√† 0, ch∆∞a ƒëi b∆∞·ªõc n√†o
    T = np.zeros((m, m)) # ƒë√¢y l√† ma tr·∫≠n tam gi√°c T
    V[0, :] = v / np.linalg.norm(v) # np.linalg.norm(v) l√† ƒë·ªÉ t√≠nh chu·∫©n (ƒë·ªô d√†i) c·ªßa vector = cƒÉn(v1^2 + v2^2 + ...)
    # => V[0, :] = v / np.linalg.norm(v) l√† ƒë·ªÉ chu·∫©n h√≥a vector v ƒë·∫ßu v√†o th√†nh vector ƒë∆°n v·ªã 
    
    # ƒêo·∫°n n√†y l√† ƒë·ªÉ l√†m cho w tr·ª±c giao v·ªõi V0 th√¥i
    # vd: ƒë·ªÉ l√†m cho 2 vector a v√† b tr·ª±c giao v·ªõi nhau
    # 1. t√≠nh t√≠ch v√¥ h∆∞·ªõng c·ªßa a v√† b (alpha)
    # 2. c·∫≠p nh·∫≠t vector a l·∫°i 
    #   a = a - alpha * b (b ·ªü ƒë√¢y l√† V[0, :] = v / cƒÉn(v) )


    w = A @ V[0, :] # t√≠nh vector w b·∫±ng c√°ch nh√¢n A v·ªõi vector ƒë·∫ßu ti√™n c·ªßa V - hi·ªÉu n√¥m na l√† w s·∫Ω cho ta bi·∫øt c√°c m√† ma tr·∫≠n A t∆∞∆°ng t√°c v·ªõi vector kh·ªüi t·∫°o v
    alpha = np.dot(w, V[0, :]) # .dot l√† t√≠nh t√≠ch v√¥ h∆∞·ªõng c·ªßa 2 vector a v√† b (trong case n√†y l√† w v√† vector ƒë·∫ßu ti√™n c·ªßa V), h·ªá s·ªë alpha l√† ƒë·ªÉ ƒëo m·ª©c ƒë·ªô song song gi·ªØa w v√† V0
    w = w - alpha * V[0, :]
    # alpha * V[0, :] t·∫°o ra m·ªôt vector c√≥ h∆∞·ªõng song song v·ªõi 
    # V[0,:] m√† c√≥ ƒë·ªô d√†i t∆∞∆°ng ·ª©ng.
    # sau khi tr·ª´ xong th√¨ n√≤ s·∫Ω lo·∫°i b·ªè ph·∫ßn song song ra kh·ªèi w

    
    T[0, 0] = alpha # G√°n gi√° tr·ªã alpha v√†o ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa T
    
    for j in range(1, m):
        beta = np.linalg.norm(w)
        if beta < 1e-10:
            break
        V[j, :] = w / beta
        w = A @ V[j, :]
        alpha = np.dot(w, V[j, :])
        w = w - alpha * V[j, :] - beta * V[j-1, :]
        
        T[j, j] = alpha
        T[j-1, j] = beta
        T[j, j-1] = beta
    
    return T, V

def QR_algorithm(T, max_iter=100, tol=1e-10):
    """
    Ph∆∞∆°ng ph√°p QR ƒë·ªÉ t√≠nh tr·ªã ri√™ng v√† vector ri√™ng c·ªßa ma tr·∫≠n T.
    """
    n = T.shape[0]
    Q_total = np.eye(n)
    T_k = np.copy(T)
    
    for _ in range(max_iter):
        Q, R = np.linalg.qr(T_k)  # Ph√¢n r√£ QR
        T_k = R @ Q  # L·∫∑p QR
        Q_total = Q_total @ Q  # T√≠ch l≈©y Q ƒë·ªÉ t√¨m vector ri√™ng
        
        # Ki·ªÉm tra h·ªôi t·ª•
        if np.linalg.norm(np.triu(T_k, k=1)) < tol:
            break
    
    eigvals = np.diag(T_k)  # Tr·ªã ri√™ng l√† c√°c ph·∫ßn t·ª≠ tr√™n ƒë∆∞·ªùng ch√©o
    eigvecs = Q_total  # Vector ri√™ng l√† Q t·ªïng h·ª£p
    return eigvals, eigvecs

def compute_eigen(L, D, k=2):
    """
    Gi·∫£i b√†i to√°n tr·ªã ri√™ng b·∫±ng thu·∫≠t to√°n Lanczos kh√¥ng d√πng eigsh.
    """
    D_diag = D.diagonal().copy()
    D_diag[D_diag < 1e-10] = 1e-10
    D_inv_sqrt = diags(1.0 / np.sqrt(D_diag)).toarray()
    L_normalized = D_inv_sqrt @ L @ D_inv_sqrt
    
    v0 = np.random.rand(L.shape[0])
    v0 /= np.linalg.norm(v0)
    
    T, V = Lanczos(L_normalized, v0, m=k+5)
    
    eigvals, eigvecs_T = QR_algorithm(T[:k, :k])
    eigvecs_original = D_inv_sqrt @ (V[:k, :].T @ eigvecs_T)
    
    return eigvecs_original


def assign_labels(eigen_vectors, k):
    return KMeans(n_clusters=k, random_state=0).fit(eigen_vectors).labels_

def save_segmentation(image, labels, k, output_path):
    h, w, c = image.shape
    segmented_image = np.zeros_like(image, dtype=np.uint8)
    for i in range(k):
        mask = labels.reshape(h, w) == i
        cluster_pixels = image[mask]
        mean_color = (cluster_pixels.mean(axis=0) * 255).astype(np.uint8) if len(cluster_pixels) > 0 else np.array([0, 0, 0], dtype=np.uint8)
        segmented_image[mask] = mean_color
    io.imsave(output_path, segmented_image)

def normalized_cuts(lan, imagename, image_path, output_path):
    start_cpu = time.time()
    logging.info(f"file name: {imagename}")
    logging.info(f"Lan thu: {lan}")
    image = io.imread(image_path)
    image = color.gray2rgb(image) if image.ndim == 2 else image[:, :, :3] if image.shape[2] == 4 else image
    image = image / 255.0
    k = 2
    start_cpu_coo = time.time()
    W = compute_weight_matrix(image)
    end_cpu_coo = time.time()

    L, D = compute_laplacian(W)
    vecs = compute_eigen(L, D, k)
    labels = assign_labels(vecs, k)
    save_segmentation(image, labels, k, output_path)
    end_cpu = time.time()
    logging.info(f"Thoi gian: {end_cpu - start_cpu} giay")
    logging.info(f"Thoi gian COO: {end_cpu_coo - start_cpu_coo} giay")
    return labels, k

# 7. Mo file chon anh tu hop thoai
def open_file_dialog():
    # Tao cua so an cho tkinter
    root = Tk()
    root.withdraw()  # An cua so chinh
    
    # Mo hop thoai chon file anh
    file_path = askopenfilename(title="Chon anh", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")])
    return file_path   

# 8. Chay thu nghiem
if __name__ == "__main__":
    # Mo hop thoai chon anh
    image_path = open_file_dialog()
    if image_path:
        logging.info(f"Da chon anh: {image_path}")
        normalized_cuts(image_path, k=3)  # Phan vung thanh 3 nhom
    else:
        logging.info("Khong co anh nao duoc chon.")


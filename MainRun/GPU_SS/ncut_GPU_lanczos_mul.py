import cupy as cp  # Thay th·∫ø NumPy b·∫±ng CuPy
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import rbf_kernel
# from scipy.sparse.linalg import eigsh
from sklearn.cluster import KMeans
from skimage import io, color
import cupyx.scipy.sparse as sp
from cupyx.scipy.sparse.linalg import eigsh
from cupyx.scipy.sparse import diags
import time
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import logging
import os
import re


def process_logs_for_summary(name):
    """
    X·ª≠ l√Ω log file ƒë·ªÉ t√≠nh th·ªùi gian trung b√¨nh c·ªßa t·ª´ng ·∫£nh v√† to√†n b·ªô th∆∞ m·ª•c.
    """
    time_per_image = {}
    coo_time_per_image = {}

    log_files = [f for f in os.listdir() if f.startswith(name) and f.endswith(".txt") and "summary" not in f]

    for log_file in log_files:
        with open(log_file, "r", encoding="utf-8") as f:
            last_coo_time = None
            last_time = None
            last_image = None

            for line in f:
                match_coo = re.search(r"Thoi gian COO: ([\d.]+) giay", line)
                if match_coo:
                    last_coo_time = float(match_coo.group(1))

                match_time = re.search(r"Thoi gian: ([\d.]+) giay", line)
                if match_time:
                    last_time = float(match_time.group(1))

                match_image = re.search(r"Anh (\d+\.jpg) lan \d+", line)
                if match_image:
                    last_image = match_image.group(1)

                if last_image and last_coo_time is not None and last_time is not None:
                    if last_image not in time_per_image:
                        time_per_image[last_image] = {"total_time": 0, "count": 0}
                        coo_time_per_image[last_image] = {"total_coo_time": 0, "count": 0}

                    time_per_image[last_image]["total_time"] += last_time
                    time_per_image[last_image]["count"] += 1

                    coo_time_per_image[last_image]["total_coo_time"] += last_coo_time
                    coo_time_per_image[last_image]["count"] += 1

                    last_coo_time = None
                    last_time = None
                    last_image = None

    avg_time_per_image = {
        img: time["total_time"] / time["count"]
        for img, time in time_per_image.items()
    }

    avg_coo_time_per_image = {
        img: time["total_coo_time"] / time["count"]
        for img, time in coo_time_per_image.items()
    }

    avg_time_folder = sum(avg_time_per_image.values()) / len(avg_time_per_image) if avg_time_per_image else 0
    avg_coo_time_folder = sum(avg_coo_time_per_image.values()) / len(avg_coo_time_per_image) if avg_coo_time_per_image else 0

    summary_log = f"{name}_summary.txt"
    with open(summary_log, "w", encoding="utf-8") as f:
        f.write("Th·ªùi gian trung b√¨nh c·ªßa t·ª´ng ·∫£nh:\n\n")
        for img in avg_time_per_image:
            f.write(f"{img}: {avg_time_per_image[img]:.4f} gi√¢y (Lanczos) | {avg_coo_time_per_image[img]:.4f} gi√¢y (COO)\n")

        f.write(f"\nTh·ªùi gian trung b√¨nh c·ªßa c·∫£ th∆∞ m·ª•c:\n")
        f.write(f"Lanczos: {avg_time_folder:.4f} gi√¢y\n")
        f.write(f"COO: {avg_coo_time_folder:.4f} gi√¢y\n")

    print(f"üìä ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o {summary_log}")



def kiemThuChayNhieuLan(i, name, folder_path):
    if not os.path.isdir(folder_path):
        print(f"‚ùå Th∆∞ m·ª•c {folder_path} kh√¥ng t·ªìn t·∫°i!")
        return

    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    
    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong {folder_path}!")
        return

    # Danh s√°ch l∆∞u th·ªùi gian c·ªßa m·ªói ·∫£nh
    time_per_image = {img: [] for img in image_files}

    for idx, file_name in enumerate(image_files, start=1):
        image_path = os.path.join(folder_path, file_name)

        log_file = f"{name}_{i}_{idx}.txt"

        # C·∫•u h√¨nh logging
        logging.basicConfig(filename=log_file, level=logging.INFO,
                            format='%(asctime)s - %(levelname)s - %(message)s')

        print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh {idx}/{len(image_files)}: {image_path}")

        # G·ªçi h√†m x·ª≠ l√Ω ·∫£nh
        normalized_cuts(image_path)

        # Ghi v√†o log
        logging.info(f"Anh {file_name} lan {i+1}")

    process_logs_for_summary(name)
# ƒê√ÇY L√Ä C√ÅCH CH·∫†Y MA TR·∫¨N TR·ªåNG S·ªê W TR√äN GPU THEO LOGIC GI·ªêNG B√äN CPU
def compute_weight_matrix(image, sigma_i=0.1, sigma_x=10):
    h, w, c = image.shape
    # logging.info(f"K√≠ch th∆∞·ªõc ·∫£nh: {h}x{w}x{c}")

    # T·ªça ƒë·ªô (x, y)
    coords = cp.array(cp.meshgrid(cp.arange(h), cp.arange(w))).reshape(2, -1).T

    # ƒê·∫∑c tr∆∞ng m√†u
    features = cp.array(image).reshape(-1, c)

    # logging.info(f"K√≠ch th∆∞·ªõc ƒë·∫∑c tr∆∞ng m√†u: {features.shape}, K√≠ch th∆∞·ªõc t·ªça ƒë·ªô: {coords.shape}")
    # logging.info(f"ƒê·∫∑c tr∆∞ng m√†u (9 ph·∫ßn t·ª≠ ƒë·∫ßu):\n{features[:9, :9]}")
    # logging.info(f"T·ªça ƒë·ªô (9 ph·∫ßn t·ª≠ ƒë·∫ßu):\n{coords[:9, :9]}")

    # T√≠nh ma tr·∫≠n tr·ªçng s·ªë b·∫±ng vector h√≥a
    W_color = cp.array(rbf_kernel(features.get(), gamma=1 / (2 * sigma_i**2)))
    W_space = cp.array(rbf_kernel(coords.get(), gamma=1 / (2 * sigma_x**2)))
    W = W_color * W_space

    # logging.info(f"M·∫£nh c·ªßa W (9x9 ph·∫ßn t·ª≠ ƒë·∫ßu):\n{W[:9, :9]}")
    return W


# 2. Tinh ma tran Laplace
def compute_laplacian(W):
    D = cp.diag(W.sum(axis=1))  # Ma tr·∫≠n ƒë∆∞·ªùng ch√©o
    L = D - W
    # logging.info("K√≠ch th∆∞·ªõc ma tr·∫≠n ƒë∆∞·ªùng ch√©o (D):", D.shape)
    # logging.info("M·∫´u c·ªßa D (9x9 ph·∫ßn t·ª≠ ƒë·∫ßu):\n", D[:9, :9])
    # logging.info("K√≠ch th∆∞·ªõc ma tr·∫≠n Laplace (L):", L.shape)
    # logging.info("M·∫´u c·ªßa L (9x9 ph·∫ßn t·ª≠ ƒë·∫ßu):\n", L[:9, :9])
    
    return L, D

# 3. Giai bai toan tri rieng

# Kernel CUDA ƒë·ªÉ nh√¢n ma tr·∫≠n v·ªõi vector
matvec_kernel = cp.RawKernel(r'''
extern "C" __global__
void matvec_mul(const double* A, const double* V, double* W, int N) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < N) {
        double sum = 0.0;
        for (int col = 0; col < N; col++) {
            sum += A[row * N + col] * V[col];
        }
        W[row] = sum;
    }
}
''', 'matvec_mul')

# Kernel CUDA ƒë·ªÉ t√≠nh t√≠ch v√¥ h∆∞·ªõng song song
dot_kernel = cp.RawKernel(r'''
extern "C" __global__
void dot_product(const double* A, const double* B, double* result, int N) {
    __shared__ double cache[1024];  
    int tid = threadIdx.x + blockIdx.x * blockDim.x;
    int cacheIndex = threadIdx.x;
    
    double temp = 0.0;
    while (tid < N) {
        temp += A[tid] * B[tid];
        tid += blockDim.x * gridDim.x;
    }
    
    cache[cacheIndex] = temp;
    __syncthreads();

    // Reduction trong shared memory
    for (int s = blockDim.x / 2; s > 0; s >>= 1) {
        if (cacheIndex < s) {
            cache[cacheIndex] += cache[cacheIndex + s];
        }
        __syncthreads();
    }
    
    if (cacheIndex == 0) {
        atomicAdd(result, cache[0]);
    }
}
''', 'dot_product')


def Lanczos(A, v, m):
    n = len(v)
    V = cp.zeros((m, n), dtype=cp.float64)
    T = cp.zeros((m, m), dtype=cp.float64)
    V[0, :] = v / cp.linalg.norm(v)

    W = cp.zeros(n, dtype=cp.float64)  # Vector t·∫°m th·ªùi
    alpha_gpu = cp.zeros(1, dtype=cp.float64)  # Gi√° tr·ªã alpha tr√™n GPU

    for j in range(m-1):
        # Nh√¢n ma tr·∫≠n A v·ªõi vector V[j, :] song song tr√™n CUDA
        matvec_kernel((n // 256 + 1,), (256,), (A, V[j, :], W, n))

        # T√≠nh alpha = dot(W, V[j, :]) song song tr√™n CUDA
        alpha_gpu.fill(0)
        dot_kernel((n // 256 + 1,), (256,), (W, V[j, :], alpha_gpu, n))
        alpha = alpha_gpu  # Gi·ªØ tr√™n GPU

        W -= alpha * V[j, :]

        if j > 0:
            W -= beta * V[j - 1, :]

        beta = cp.linalg.norm(W)
        if beta < 1e-10:
            break

        if j + 1 < V.shape[0]:
            V[j + 1, :] = W / beta
        else:
            print(f"L·ªói: j + 1 ({j + 1}) v∆∞·ª£t qu√° gi·ªõi h·∫°n {V.shape[0]}")

        T[j, j] = alpha
        if j < m - 1:
            T[j, j + 1] = beta
            T[j + 1, j] = beta

    return T, V

def compute_eigen(L, D, k=2):
    """
    Gi·∫£i b√†i to√°n tr·ªã ri√™ng b·∫±ng thu·∫≠t to√°n Lanczos kh√¥ng d√πng eigsh.
    :param L: Ma tr·∫≠n Laplace th∆∞a (Scipy sparse matrix).
    :param D: Ma tr·∫≠n ƒë∆∞·ªùng ch√©o (Scipy sparse matrix).
    :param k: S·ªë tr·ªã ri√™ng nh·ªè nh·∫•t c·∫ßn t√≠nh.
    :return: C√°c vector ri√™ng t∆∞∆°ng ·ª©ng (k vector).
    """
    # Chuan hoa ma tran Laplace: D^-1/2 * L * D^-1/2
    D_diag = D.diagonal().copy()  # Lay duong cheo cua D
    D_diag[D_diag < 1e-10] = 1e-10  # Tranh chia cho 0 hoac gan 0
    D_inv_sqrt = diags(1.0 / cp.sqrt(D_diag))  # Tinh D^-1/2
    L_normalized = D_inv_sqrt @ L @ D_inv_sqrt  # Chuan hoa ma tran Laplace
    
    # Kh·ªüi t·∫°o vector ng·∫´u nhi√™n
    v0 = cp.random.rand(L.shape[0])
    v0 /= cp.linalg.norm(v0)
    
    start_lan = time.time()
    # √Åp d·ª•ng thu·∫≠t to√°n Lanczos
    T, V = Lanczos(L_normalized, v0, m=k+5)  # S·ª≠ d·ª•ng m > k ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
    end_lan = time.time()
    logging.info(f"Thoi gian: {end_lan - start_lan} giay")
    
    # T√≠nh tr·ªã ri√™ng v√† vector ri√™ng c·ªßa ma tr·∫≠n tam gi√°c T
    eigvals, eigvecs_T = cp.linalg.eigh(T[:k, :k])
    
    # Chuy·ªÉn ƒë·ªïi vector ri√™ng v·ªÅ kh√¥ng gian g·ªëc
    eigvecs_original = D_inv_sqrt @ (V[:k, :].T @ eigvecs_T)
    
    return eigvecs_original

# 4. Gan nhan cho tung diem anh duoc dua tren vector rieng
def assign_labels(eigen_vectors, k):
    # Chuyen du lieu ve CPU de dung K-Means
    eigen_vectors_cpu = eigen_vectors.get()
    # logging.info(f"Manh cua vector rieng (9 hang dau):\n{eigen_vectors_cpu[:9, :]}")

    kmeans = KMeans(n_clusters=k, random_state=0).fit(eigen_vectors_cpu)
    labels = kmeans.labels_
    # logging.info(f"Nhan gan cho 27 pixel dau tien: {labels[:27]}")
    return cp.array(labels)  # Chuyen lai ve GPU

# 5. Hien thi ket qua
def display_segmentation(image, labels, k):
    h, w, c = image.shape
    segmented_image = cp.zeros_like(cp.array(image), dtype=cp.uint8)
    
    # Tao bang mau ngau nhien
    colors = cp.random.randint(0, 255, size=(k, 3), dtype=cp.uint8)
    
    # To mau tung vung
    for i in range(k):
        segmented_image[labels.reshape(h, w) == i] = colors[i]
    
    # Hien thi tren CPU
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title("Original Image")
    plt.imshow(image)
    plt.axis('off')
    
    plt.subplot(1, 2, 2)
    plt.title("Segmented Image")
    plt.imshow(segmented_image.get())
    plt.axis('off')
    plt.show()

# 6. Ket hop toan bo
def normalized_cuts(image_path, k=2):
    
    # Tinh tong tren GPU
    start_gpu = time.time()
    
    # Doc anh va chuan hoa
    image = io.imread(image_path)
    if image.ndim == 2:  # Neu la anh xam, chuyen thanh RGB
        image = color.gray2rgb(image)
    elif image.shape[2] == 4:  # Neu la anh RGBA, loai bo kenh alpha
        image = image[:, :, :3]
    image = image / 255.0  # Chuan hoa ve [0, 1]
    
    # Tinh toan Ncuts
    start_cpu_coo = time.time()
    # logging.info("Dang tinh toan ma tran trong so...")
    W = compute_weight_matrix(image)
    end_cpu_coo = time.time()
    
    # logging.info("Tinh Laplace...")
    L, D = compute_laplacian(W)
    
    # logging.info("Tinh eigenvectors...")
    eigen_vectors = compute_eigen(L,D, k=k)  # Tinh k vector rieng
    
    # logging.info("Phan vung do thi...")
    labels = assign_labels(eigen_vectors, k)  # Gan nhan cho moi diem anh
    
    # logging.info("Hien thi ket qua...")

    cp.cuda.Stream.null.synchronize()  # Dong bo hoa de dam bao GPU hoan thanh tinh toan
    end_gpu = time.time()
    logging.info(f"Thoi gian COO: {end_cpu_coo - start_cpu_coo} giay")
    # logging.info(f"Thoi gian: {end_gpu - start_gpu} giay")

    display_segmentation(image, labels, k)

# 7. Mo file chon anh tu hop thoai
def open_file_dialog():
    # Tao cua so an cho tkinter
    root = Tk()
    root.withdraw()  # An cua so chinh
    
    # Mo hop thoai chon file anh
    file_path = askopenfilename(title="Chon anh", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")])
    return file_path   

# 8. Chay thu nghiem
if __name__ == "__main__":
    # Mo hop thoai chon anh
    image_path = open_file_dialog()
    if image_path:
        logging.info(f"Da chon anh: {image_path}")
        normalized_cuts(image_path, k=3)  # Phan vung thanh 3 nhom
    else:
        logging.info("Khong co anh nao duoc chon.")

import cupy as cp  # Thay th·∫ø NumPy b·∫±ng CuPy
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import rbf_kernel
# from scipy.sparse.linalg import eigsh
from sklearn.cluster import KMeans
from skimage import io, color
import cupyx.scipy.sparse as sp
from cupyx.scipy.sparse.linalg import eigsh
from cupyx.scipy.sparse import diags
import time
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import logging
import os
import re
from cupyx.scipy.sparse import coo_matrix


import pandas as pd

def process_logs_for_summary(name, results, run_index):
    """
    L∆∞u k·∫øt qu·∫£ v√†o file Excel, ƒë·∫£m b·∫£o m·ªói l·∫ßn ch·∫°y c√≥ sheet ri√™ng.
    C·∫≠p nh·∫≠t sheet "T√≥m t·∫Øt" ƒë·ªÉ ch·ªâ ch·ª©a trung b√¨nh c√°c th·ªùi gian c·ªßa m·ªói ·∫£nh.
    """
    excel_file = f"{name}_summary.xlsx"
    
    # Chuy·ªÉn d·ªØ li·ªáu v·ªÅ DataFrame
    df = pd.DataFrame(results, columns=["·∫¢nh", "L·∫ßn ch·∫°y", "Th·ªùi gian Lanczos", "Th·ªùi gian COO"])
    
    # M·ªü file ƒë·ªÉ ghi d·ªØ li·ªáu
    with pd.ExcelWriter(excel_file, engine="openpyxl", mode="a" if os.path.exists(excel_file) else "w") as writer:
        sheet_name = f"Sheet {run_index}"  # T·∫°o sheet theo s·ªë l·∫ßn ch·∫°y
        df.to_excel(writer, sheet_name=sheet_name, index=False)

    # ƒê·ªçc l·∫°i to√†n b·ªô d·ªØ li·ªáu t·ª´ c√°c sheet ƒë·ªÉ c·∫≠p nh·∫≠t "T√≥m t·∫Øt"
    all_data = []
    with pd.ExcelFile(excel_file) as xls:
        for sheet in xls.sheet_names:
            if sheet.startswith("Sheet "):  # Ch·ªâ l·∫•y d·ªØ li·ªáu t·ª´ c√°c l·∫ßn ch·∫°y
                all_data.append(pd.read_excel(xls, sheet_name=sheet))

    if all_data:
        full_df = pd.concat(all_data, ignore_index=True)
        summary = full_df.groupby("·∫¢nh").agg({
            "Th·ªùi gian Lanczos": "mean",
            "Th·ªùi gian COO": "mean"
        }).reset_index()

        # üõ† S·ª≠a l·ªói ghi ƒë√® b·∫±ng `if_sheet_exists="replace"`
        with pd.ExcelWriter(excel_file, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
            summary.to_excel(writer, sheet_name="T√≥m t·∫Øt", index=False)

    print(f"üìä ƒê√£ l∆∞u k·∫øt qu·∫£ l·∫ßn ch·∫°y {run_index} v√†o {excel_file}")

def kiemThuChayNhieuLan(i, name, folder_path):
    if not os.path.isdir(folder_path):
        print(f"‚ùå Th∆∞ m·ª•c {folder_path} kh√¥ng t·ªìn t·∫°i!")
        return

    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong {folder_path}!")
        return

    results = []  # L∆∞u k·∫øt qu·∫£ cho t·ª´ng l·∫ßn ch·∫°y

    for idx, file_name in enumerate(image_files, start=1):
        image_path = os.path.join(folder_path, file_name)

        print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh {idx}/{len(image_files)}: {image_path}")

        # G·ªçi h√†m x·ª≠ l√Ω ·∫£nh v√† l·∫•y th·ªùi gian
        total_time, coo_time, lanczos_time = normalized_cuts(image_path)

        # L∆∞u k·∫øt qu·∫£
        results.append([file_name, i + 1, lanczos_time, coo_time])

    process_logs_for_summary(name, results, i + 1)  # Truy·ªÅn s·ªë l·∫ßn ch·∫°y v√†o




# ƒê√ÇY L√Ä C√ÅCH CH·∫†Y MA TR·∫¨N TR·ªåNG S·ªê W TR√äN GPU THEO LOGIC GI·ªêNG B√äN CPU
def compute_weight_matrix(image, sigma_i=0.1, sigma_x=10):
    h, w, c = image.shape
    coords = cp.array(cp.meshgrid(cp.arange(h), cp.arange(w))).reshape(2, -1).T  # T·ªça ƒë·ªô (x, y)
    features = image.reshape(-1, c)  # ƒê·∫∑c tr∆∞ng m√†u

    # logging.info(f"Kich thuoc anh: {h}x{w}x{c}")
    # logging.info(f"Kich thuoc dac trung mau: {features.shape}, Kich thuoc toa do: {coords.shape}")
    # logging.info(f"Dac trung mau:\n{features[:9, :9]}")
    # logging.info(f"Toa do:\n{coords[:9, :9]}")

    start_cpu_coo=time.time()
    # T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng v·ªÅ ƒë·∫∑c tr∆∞ng v√† kh√¥ng gian
    W_features = rbf_kernel(cp.asnumpy(features), gamma=1/(2 * sigma_i**2))  # Chuy·ªÉn d·ªØ li·ªáu t·ª´ GPU sang CPU
    W_coords = rbf_kernel(cp.asnumpy(coords), gamma=1/(2 * sigma_x**2))  # Chuy·ªÉn d·ªØ li·ªáu t·ª´ GPU sang CPU

    # Chuy·ªÉn k·∫øt qu·∫£ t·ª´ NumPy (CPU) sang CuPy (GPU)
    W_features = cp.asarray(W_features)
    W_coords = cp.asarray(W_coords)
    end_cpu_coo=time.time()

    logging.info(f"Thoi gian COO: {end_cpu_coo - start_cpu_coo} giay")

    W = cp.multiply(W_features, W_coords)  # Ph√©p nh√¢n ph·∫ßn t·ª≠ c·ªßa ma tr·∫≠n tr√™n GPU

    # Chuy·ªÉn th√†nh ma tr·∫≠n th∆∞a d·∫°ng COO
    W_sparse = coo_matrix(W)

    # logging.info(f"Kich thuoc ma tran trong so (W): {W.shape}")
    # logging.info(f"Kich thuoc ma tran thua (W_sparse): {W_sparse.shape}")
    # logging.info(f"So luong phan tu khac 0: {W_sparse.nnz}")
    # logging.info(f"Mau cua W_features (9x9 phan tu dau):\n{W_features[:9, :9]}")
    # logging.info(f"Mau cua W_coords (9x9 phan tu dau):\n{W_coords[:9, :9]}")
    # logging.info(f"Mau cua W (9x9 phan tu dau):\n{W[:9, :9]}")

    return W_sparse





# 2. Tinh ma tran Laplace
def compute_laplacian(W_sparse):
    # T·ªïng c·ªßa c√°c h√†ng trong ma tr·∫≠n W
    D_diag = W_sparse.sum(axis=1).get().flatten()  # T√≠nh t·ªïng c√°c h√†ng
    D = cp.diag(D_diag)  # T·∫°o ma tr·∫≠n ƒë∆∞·ªùng ch√©o t·ª´ t·ªïng h√†ng
    L = D - W_sparse  # L = D - W
    # logging.info("Kich thuoc ma tran duong cheo (D): %s", D.shape)
    # logging.info("Mau cua D (9 phan tu dau):\n%s", D_diag[:9])  # In ph·∫ßn t·ª≠ tr√™n ƒë∆∞·ªùng ch√©o
    # logging.info("Kich thuoc ma tran Laplace (L): %s", L.shape)
    # logging.info("Mau cua L (9x9 phan tu dau):\n%s", L[:9, :9])
    return L, D

# 3. Giai bai toan tri rieng

def matvec_mult(A, v):
    """
    H√†m nh√¢n ma tr·∫≠n A v·ªõi vector v.
    : A: Ma tr·∫≠n (numpy 2D array).
    : v: Vector (numpy 1D array).
    : return: Vector k·∫øt qu·∫£ sau ph√©p nh√¢n.
    """
    n = A.shape[0]
    result = cp.zeros(n)
    for i in range(n):
        result[i] = cp.dot(A[i, :], v)  # Nh√¢n t·ª´ng h√†ng c·ªßa A v·ªõi v
    return result

def Lanczos(A, v, m):
    """
    Thu·∫≠t to√°n Lanczos ƒë·ªÉ x·∫•p x·ªâ tr·ªã ri√™ng v√† vector ri√™ng.
    : A: Ma tr·∫≠n c·∫ßn t√≠nh (numpy 2D array).
    : v: Vector kh·ªüi t·∫°o.
    : m: S·ªë b∆∞·ªõc l·∫∑p Lanczos.
    : return: Ma tr·∫≠n tam gi√°c T v√† ma tr·∫≠n tr·ª±c giao V.
    """
    n = len(v)
    V = cp.zeros((m, n))
    T = cp.zeros((m, m))
    V[0, :] = v / cp.linalg.norm(v)

    w = matvec_mult(A, V[0, :])
    alpha = cp.dot(w, V[0, :])
    w = w - alpha * V[0, :]
    
    T[0, 0] = alpha
    
    for j in range(1, m):
        beta = cp.linalg.norm(w)
        if beta < 1e-10:
            break
        V[j, :] = w / beta
        w = matvec_mult(A, V[j, :])
        alpha = cp.dot(w, V[j, :])
        w = w - alpha * V[j, :] - beta * V[j-1, :]
        
        T[j, j] = alpha
        T[j-1, j] = beta
        T[j, j-1] = beta
    
    return T, V
def compute_eigen(L, D, k=2):
    """
    Gi·∫£i b√†i to√°n tr·ªã ri√™ng b·∫±ng thu·∫≠t to√°n Lanczos kh√¥ng d√πng eigsh.
    :param L: Ma tr·∫≠n Laplace th∆∞a (Scipy sparse matrix).
    :param D: Ma tr·∫≠n ƒë∆∞·ªùng ch√©o (Scipy sparse matrix).
    :param k: S·ªë tr·ªã ri√™ng nh·ªè nh·∫•t c·∫ßn t√≠nh.
    :return: C√°c vector ri√™ng t∆∞∆°ng ·ª©ng (k vector).
    """
    # Chuan hoa ma tran Laplace: D^-1/2 * L * D^-1/2
    D_diag = D.diagonal().copy()  # Lay duong cheo cua D
    D_diag[D_diag < 1e-10] = 1e-10  # Tranh chia cho 0 hoac gan 0
    D_inv_sqrt = diags(1.0 / cp.sqrt(D_diag))  # Tinh D^-1/2
    L_normalized = D_inv_sqrt @ L @ D_inv_sqrt  # Chuan hoa ma tran Laplace
    
    # Kh·ªüi t·∫°o vector ng·∫´u nhi√™n
    v0 = cp.random.rand(L.shape[0])
    v0 /= cp.linalg.norm(v0)
     
    start_lan = time.time()
    # √Åp d·ª•ng thu·∫≠t to√°n Lanczos
    T, V = Lanczos(L_normalized, v0, m=k+5)  # S·ª≠ d·ª•ng m > k ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
    end_lan = time.time()
    # logging.info(f"Thoi gian lanczos: {end_lan - start_lan} giay")
    lanczos_time = end_lan-start_lan;
    # T√≠nh tr·ªã ri√™ng v√† vector ri√™ng c·ªßa ma tr·∫≠n tam gi√°c T
    eigvals, eigvecs_T = cp.linalg.eigh(T[:k, :k])
    
    # Chuy·ªÉn ƒë·ªïi vector ri√™ng v·ªÅ kh√¥ng gian g·ªëc
    eigvecs_original = D_inv_sqrt @ (V[:k, :].T @ eigvecs_T)
    
    return eigvecs_original, lanczos_time

# 4. Gan nhan cho tung diem anh duoc dua tren vector rieng
def assign_labels(eigen_vectors, k):
    # Chuyen du lieu ve CPU de dung K-Means
    eigen_vectors_cpu = eigen_vectors.get()
    # logging.info(f"Manh cua vector rieng (9 hang dau):\n{eigen_vectors_cpu[:9, :]}")

    kmeans = KMeans(n_clusters=k, random_state=0).fit(eigen_vectors_cpu)
    labels = kmeans.labels_
    # logging.info(f"Nhan gan cho 27 pixel dau tien: {labels[:27]}")
    return cp.array(labels)  # Chuyen lai ve GPU

# 5. Hien thi ket qua
def display_segmentation(image, labels, k):
    h, w, c = image.shape
    segmented_image = cp.zeros_like(cp.array(image), dtype=cp.uint8)
    
    # Tao bang mau ngau nhien
    colors = cp.random.randint(0, 255, size=(k, 3), dtype=cp.uint8)
    
    # To mau tung vung
    for i in range(k):
        segmented_image[labels.reshape(h, w) == i] = colors[i]
    
    # Hien thi tren CPU
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.title("Original Image")
    plt.imshow(image)
    plt.axis('off')
    
    plt.subplot(1, 2, 2)
    plt.title("Segmented Image")
    plt.imshow(segmented_image.get())
    plt.axis('off')
    plt.show()

# 6. Ket hop toan bo
def normalized_cuts(image_path, k=2):
    start_gpu = time.time()

    # ƒê·ªçc ·∫£nh
    image = io.imread(image_path)
    if image.ndim == 2:
        image = color.gray2rgb(image)
    elif image.shape[2] == 4:
        image = image[:, :, :3]
    image = image / 255.0

    start_coo = time.time()
    W = compute_weight_matrix(image)
    end_coo = time.time()

    L, D = compute_laplacian(W)
    eigen_vectors,lanczos_time  = compute_eigen(L, D, k=k)
    labels = assign_labels(eigen_vectors, k)

    cp.cuda.Stream.null.synchronize()
    end_gpu = time.time()

    total_time = end_gpu - start_gpu
    coo_time = end_coo - start_coo

    return total_time, coo_time, lanczos_time


# 7. Mo file chon anh tu hop thoai
def open_file_dialog():
    # Tao cua so an cho tkinter
    root = Tk()
    root.withdraw()  # An cua so chinh
    
    # Mo hop thoai chon file anh
    file_path = askopenfilename(title="Chon anh", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")])
    return file_path   

# 8. Chay thu nghiem
if __name__ == "__main__":
    # Mo hop thoai chon anh
    image_path = open_file_dialog()
    if image_path:
        logging.info(f"Da chon anh: {image_path}")
        normalized_cuts(image_path, k=3)  # Phan vung thanh 3 nhom
    else:
        logging.info("Khong co anh nao duoc chon.")

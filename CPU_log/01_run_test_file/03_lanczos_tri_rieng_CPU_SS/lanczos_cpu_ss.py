import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import rbf_kernel
from scipy.sparse.linalg import eigsh, LinearOperator
from scipy.sparse import diags
from sklearn.cluster import KMeans
from skimage import io, color
import time
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from scipy.sparse import coo_matrix #chuy·ªÉn sang ma tr·∫≠n coo
from scipy.sparse import isspmatrix, diags
import logging
import os
import pandas as pd
from joblib import Parallel, delayed  
from numba import njit, prange



# logging.basicConfig(level=logging.INFO)  
        
def kiemThuChayNhieuLan(i, name, folder_path, output_excel="results.xlsx"):
    # Ki·ªÉm tra th∆∞ m·ª•c
    if not os.path.isdir(folder_path):
        print(f"‚ùå Th∆∞ m·ª•c {folder_path} kh√¥ng t·ªìn t·∫°i!")
        return
    
    # L·∫•y danh s√°ch file ·∫£nh
    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
    
    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh n√†o trong {folder_path}!")
        return

    results = []  # Danh s√°ch l∆∞u k·∫øt qu·∫£

    for idx, file_name in enumerate(image_files, start=1):
        image_path = os.path.join(folder_path, file_name)
        print(f"üì∑ ƒêang x·ª≠ l√Ω ·∫£nh {idx}: {image_path}")
        
        # X·ª≠ l√Ω ·∫£nh
        _, lanczos_time   = normalized_cuts(i, file_name, image_path, output_excel)  # B·ªè time_w v√¨ kh√¥ng c·∫ßn
        
        # L∆∞u k·∫øt qu·∫£ v√†o danh s√°ch
        results.append([i, idx, file_name, lanczos_time])

    # Ghi k·∫øt qu·∫£ v√†o file Excel
    df = pd.DataFrame(results, columns=["L·∫ßn ch·∫°y", "·∫¢nh s·ªë", "T√™n ·∫£nh", "Th·ªùi gian t·ªïng Lanczos (s)"])

    # T·∫°o t√™n file k·∫øt qu·∫£ theo format chu·∫©n
    output_excel = f"result_{name}_{i}.xlsx"
    
    df.to_excel(output_excel, index=False, engine='openpyxl')
    print(f"‚úÖ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o {output_excel}")

# 1. Tinh ma tran trong so
# def compute_weight_matrix(image, sigma_i=0.1, sigma_x=10):
#     h, w, c = image.shape
#     coords = np.array(np.meshgrid(range(h), range(w))).reshape(2, -1).T  # Toa do (x, y)
#     features = image.reshape(-1, c)  # Dac trung mau
    
#     logging.info(f"Kich thuoc anh: {h}x{w}x{c}")
#     logging.info(f"Kich thuoc dac trung mau: {features.shape}, Kich thuoc toa do: {coords.shape}")
#     logging.info(f"Dac trung mau:\n{features[:9, :9]}")
#     logging.info(f"Toa do:\n{coords[:9, :9]}")

    
#     # Tinh do tuong dong ve dac trung va khong gian
#     W_features = rbf_kernel(features, gamma=1/(2 * sigma_i**2))
#     W_coords = rbf_kernel(coords, gamma=1/(2 * sigma_x**2))
#     W = W_features * W_coords
    
#     logging.info(f"Kich thuoc ma tran trong so (W): {W.shape}")
#     logging.info(f"Kich thuoc ma tran dac trung mau: {W_features.shape}, Kich thuoc ma tran toa do: {W_coords.shape}")
#     logging.info(f"Mau cua W_features (9x9 phan tu dau):\n{W_features[:9, :9]}")
#     logging.info(f"Mau cua W_coords (9x9 phan tu dau):\n{W_coords[:9, :9]}")
#     logging.info(f"Mau cua W (9x9 phan tu dau):\n{W[:9, :9]}")

#     # Chuyen ma tran W sang dang ma tran thua COO
#     W_sparse = coo_matrix(W)
#     logging.info(f"Kich thuoc ma tran thua (COO): {W_sparse.shape}")
#     logging.info(f"Mau cua ma tran thua (COO) [du lieu, hang, cot]:\n{W_sparse.data[:9]}, {W_sparse.row[:9]}, {W_sparse.col[:9]}")
    
#     return W_sparse

def compute_weight_matrix(image, sigma_i=0.1, sigma_x=10):
    h, w, c = image.shape
    coords = np.array(np.meshgrid(range(h), range(w))).reshape(2, -1).T  # Toa do (x, y)
    features = image.reshape(-1, c)  # Dac trung mau
    
    # Tinh do tuong dong ve dac trung va khong gian
    W_features = rbf_kernel(features, gamma=1/(2 * sigma_i**2))
    W_coords = rbf_kernel(coords, gamma=1/(2 * sigma_x**2))
    W = W_features * W_coords
    
    return W


# 2. Tinh ma tran Laplace
def compute_laplacian(W_sparse):
    # T·∫°o ma tr·∫≠n ƒë∆∞·ªùng ch√©o t·ª´ t·ªïng c√°c h√†ng
    D_diag = W_sparse.sum(axis=1).A.flatten() if hasattr(W_sparse, 'toarray') else W_sparse.sum(axis=1)
    D = np.diag(D_diag)  # Ma tr·∫≠n ƒë∆∞·ªùng ch√©o
    L = D - W_sparse.toarray() if hasattr(W_sparse, 'toarray') else D -W_sparse  # ƒê·∫£m b·∫£o W l√† d·∫°ng m·∫£ng NumPy

    logging.info("Kich thuoc ma tran duong cheo (D): %s", D.shape)
    logging.info("Mau cua D (9 phan tu dau):\n%s", D_diag[:9])  # In ph·∫ßn t·ª≠ tr√™n ƒë∆∞·ªùng ch√©o
    logging.info("Kich thuoc ma tran Laplace (L): %s", L.shape)
    logging.info("Mau cua L (9x9 phan tu dau):\n%s", L[:9, :9])

    return L, D


# 3. Giai bai toan tri rieng
def handle_dot(a, b):
    """T√≠nh t√≠ch v√¥ h∆∞·ªõng c·ªßa hai vector song song h√≥a"""
    return np.sum(a * b)  # NumPy ƒë√£ t·ªëi ∆∞u h√≥a, nh∆∞ng c√≥ th·ªÉ d√πng joblib n·∫øu c·∫ßn

def matrix_vector_product(A, v):  
    """H√†m nh√¢n ma tr·∫≠n v·ªõi vector"""  
    return A @ v  

# C√°c ph√©p to√°n A @ v v√† np.dot(v1, v2) v·ªën ƒë√£ nhanh n·∫øu NumPy s·ª≠ d·ª•ng BLAS/MKL ƒëa lu·ªìng. N·∫øu b·∫°n mu·ªën t·∫≠n d·ª•ng ƒëa l√µi CPU, ch·ªâ c·∫ßn b·∫≠t h·ªó tr·ª£ OpenBLAS/MKL:
os.environ["OMP_NUM_THREADS"] = "2"  # ƒêi·ªÅu ch·ªânh s·ªë lu·ªìng t√πy theo CPU 
# C√°c ph√©p to√°n A @ v v√† np.dot(v1, v2) v·ªën ƒë√£ nhanh n·∫øu NumPy s·ª≠ d·ª•ng BLAS/MKL ƒëa lu·ªìng. N·∫øu mu·ªën t·∫≠n d·ª•ng ƒëa l√µi CPU, ch·ªâ c·∫ßn b·∫≠t h·ªó tr·ª£ OpenBLAS/MKL:
os.environ["OMP_NUM_THREADS"] = "6"  # ƒêi·ªÅu ch·ªânh s·ªë lu·ªìng t√πy theo CPU 
# os.environ["OMP_NUM_THREADS"] = str(os.cpu_count())  # L·∫•y to√†n b·ªô s·ªë lu·ªìng CPU kh·∫£ d·ª•ng

# from numba import njit, prange ƒëo·∫°n n√†y import ·ªü tr√™n
# @njit(parallel=True) # version n√†y th√¨ th·ªùi gian kh√∫c ƒë·∫ßu ch·∫°y c√≤n nhi·ªÅu, v√† c√≤n d√πng break c√≥ th·ªÉ g√¢y l·ªói
# def Lanczos(A, v, m):  
#     n = len(v)  
#     V = np.zeros((m, n))  
#     T = np.zeros((m, m))  
#     V[0, :] = v / np.linalg.norm(v)  

#     w = A @ V[0, :]  
#     alpha = np.dot(w, V[0, :])  
#     w = w - alpha * V[0, :]  
#     T[0, 0] = alpha  

#     for j in prange(1, m):  # prange ƒë·ªÉ ch·∫°y song song
#         beta = np.linalg.norm(w)  
#         if beta < 1e-10:  
#             break  
#         V[j, :] = w / beta  
#         w = A @ V[j, :]  
#         alpha = np.dot(w, V[j, :])  
#         w = w - alpha * V[j, :] - beta * V[j-1, :]  

#         T[j, j] = alpha  
#         T[j-1, j] = beta  
#         T[j, j-1] = beta  

#     return T, V  

@njit(parallel=True, cache=True)  # Cache gi√∫p gi·∫£m th·ªùi gian bi√™n d·ªãch l·∫ßn ƒë·∫ßu (th·∫≠t ra n√≥ ch·ªâ ko b√°o l·ªói c·∫£nh b√°o nh∆∞ ·ªü version ·ªü tr√™n ko c√≥ cache=True th√¥i ch·ª© l·∫ßn 1 v·∫´n l√¢u)
def Lanczos(A, v, m): # version m·ªõi
    n = len(v)
    V = np.zeros((m, n))
    T = np.zeros((m, m))
    V[0, :] = v / np.linalg.norm(v)

    for j in prange(1, m):  
        beta = np.linalg.norm(v)
        if beta < 1e-10:
            continue  # C√≥ th·ªÉ g√¢y l·ªói, n√™n thay b·∫±ng return ho·∫∑c continue
        
        V[j, :] = v / beta
        v = A @ V[j, :]
        alpha = np.dot(v, V[j, :])  # T√≠ch v√¥ h∆∞·ªõng chu·∫©n h∆°n

        T[j, j] = alpha
        T[j-1, j] = beta
        T[j, j-1] = beta

    return T, V

# version c≈©
# def Lanczos(A, v, m):  
#     n = len(v)  
#     V = np.zeros((m, n))  
#     T = np.zeros((m, m))  
#     V[0, :] = v / np.linalg.norm(v)  

#     # S·ª≠ d·ª•ng joblib ƒë·ªÉ t√≠nh w  
#     try:  
#         w = Parallel(n_jobs=-1)(delayed(matrix_vector_product)(A, V[0, :]) for _ in range(1))[0]  # Nh√¢n ma tr·∫≠n A v·ªõi V[0, :]  
#     except Exception as e:  
#         logging.error(f"Error in matrix-vector product: {e}")  
#         raise  

#     # S·ª≠ d·ª•ng joblib ƒë·ªÉ t√≠nh alpha  
#     try:  
#         alpha = Parallel(n_jobs=-1)(delayed(handle_dot)(w, V[0, :]) for _ in range(1))[0]  # T√≠nh t√≠ch v√¥ h∆∞·ªõng song song  
#     except Exception as e:  
#         logging.error(f"Error in handle_dot: {e}")  
#         raise  

#     w = w - alpha * V[0, :]  
#     T[0, 0] = alpha  

#     for j in range(1, m):  
#         beta = np.linalg.norm(w)  
#         if beta < 1e-10:  
#             break  
#         V[j, :] = w / beta  
#         w = A @ V[j, :]  
#         alpha = handle_dot(w, V[j, :])  
#         w = w - alpha * V[j, :] - beta * V[j-1, :]  

#         T[j, j] = alpha  
#         T[j-1, j] = beta  
#         T[j, j-1] = beta  

#     return T, V  

def compute_eigen(L, D, k=2):
    """
    Gi·∫£i b√†i to√°n tr·ªã ri√™ng b·∫±ng thu·∫≠t to√°n Lanczos kh√¥ng d√πng eigsh.
    :param L: Ma tr·∫≠n Laplace th∆∞a (Scipy sparse matrix).
    :param D: Ma tr·∫≠n ƒë∆∞·ªùng ch√©o (Scipy sparse matrix).
    :param k: S·ªë tr·ªã ri√™ng nh·ªè nh·∫•t c·∫ßn t√≠nh.
    :return: C√°c vector ri√™ng t∆∞∆°ng ·ª©ng (k vector).
    """
    # Chuan hoa ma tran Laplace: D^-1/2 * L * D^-1/2
    D_diag = D.diagonal().copy()  # Lay duong cheo cua D
    D_diag[D_diag < 1e-10] = 1e-10  # Tranh chia cho 0 hoac gan 0
    D_inv_sqrt = diags(1.0 / np.sqrt(D_diag))  # Tinh D^-1/2
    L_normalized = D_inv_sqrt @ L @ D_inv_sqrt  # Chuan hoa ma tran Laplace
    
    # Kh·ªüi t·∫°o vector ng·∫´u nhi√™n
    v0 = np.random.rand(L.shape[0])
    v0 /= np.linalg.norm(v0)

    # √Åp d·ª•ng thu·∫≠t to√°n Lanczos
    lanczos_time_start = time.time()
    T, V = Lanczos(L_normalized, v0, m=k+5)  # S·ª≠ d·ª•ng m > k ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
    lanczos_time_end = time.time()

    # Th·ªùi gian Lanczos
    lanczos_time = lanczos_time_end - lanczos_time_start
    logging.info(f"Thoi gian lanczos khong song song(khong co COO): {lanczos_time_end - lanczos_time_start:.6f} giay")
    
    # T√≠nh tr·ªã ri√™ng v√† vector ri√™ng c·ªßa ma tr·∫≠n tam gi√°c T
    eigvals, eigvecs_T = np.linalg.eig(T[:k, :k])
    
    # Chuy·ªÉn ƒë·ªïi vector ri√™ng v·ªÅ kh√¥ng gian g·ªëc
    eigvecs_original = D_inv_sqrt @ (V[:k, :].T @ eigvecs_T)
    
    return eigvecs_original, lanczos_time

# 4. Gan nhan cho tung diem anh dua tren vector rieng
def assign_labels(eigen_vectors, k):
    return KMeans(n_clusters=k, random_state=0).fit(eigen_vectors).labels_

def save_segmentation(image, labels, k, output_path):
    h, w, c = image.shape
    segmented_image = np.zeros_like(image, dtype=np.uint8)
    for i in range(k):
        mask = labels.reshape(h, w) == i
        cluster_pixels = image[mask]
        mean_color = (cluster_pixels.mean(axis=0) * 255).astype(np.uint8) if len(cluster_pixels) > 0 else np.array([0, 0, 0], dtype=np.uint8)
        segmented_image[mask] = mean_color
    io.imsave(output_path, segmented_image)

def normalized_cuts(lan, imagename, image_path, output_path):
    start_cpu = time.time()  # ƒêo t·ªïng th·ªùi gian x·ª≠ l√Ω
    logging.info(f"file name: {imagename}")
    logging.info(f"Lan thu: {lan}")

    # ƒê·ªçc ·∫£nh v√† chu·∫©n h√≥a
    image = io.imread(image_path)
    image = color.gray2rgb(image) if image.ndim == 2 else image[:, :, :3] if image.shape[2] == 4 else image
    image = image / 255.0
    k = 2  

    # T√≠nh ma tr·∫≠n tr·ªçng s·ªë
    W = compute_weight_matrix(image)

    # T√≠nh to√°n Laplacian
    L, D = compute_laplacian(W)

    # Gi·∫£i eigen v√† ƒëo th·ªùi gian Lanczos
    vecs, lanczos_time = compute_eigen(L, D, k)

    # G√°n nh√£n
    labels = assign_labels(vecs, k)

    # L∆∞u k·∫øt qu·∫£
    save_segmentation(image, labels, k, output_path)

    end_cpu = time.time()
    
    # T√≠nh t·ªïng th·ªùi gian
    total_cpu_time = end_cpu - start_cpu

    logging.info(f"‚è≥ T·ªïng th·ªùi gian: {total_cpu_time:.6f} gi√¢y")
    logging.info(f"‚è≥ Th·ªùi gian Lanczos: {lanczos_time:.6f} gi√¢y")

    return total_cpu_time, lanczos_time


# 7. Mo file chon anh tu hop thoai
def open_file_dialog():
    # Tao cua so an cho tkinter
    root = Tk()
    root.withdraw()  # An cua so chinh
    
    # Mo hop thoai chon file anh
    file_path = askopenfilename(title="Chon anh", filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp")])
    return file_path   

# 8. Chay thu nghiem
if __name__ == "__main__":
    # Mo hop thoai chon anh
    image_path = open_file_dialog()
    if image_path:
        logging.info(f"Da chon anh: {image_path}")
        normalized_cuts(image_path, k=3)  # Phan vung thanh 3 nhom
    else:
        logging.info("Khong co anh nao duoc chon.")

